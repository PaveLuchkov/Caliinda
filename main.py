import os
from dotenv import load_dotenv
import argparse
from speech_to_text import recognize_speech
from llm_handler import LLMHandler
from calendar_integration import create_calendar_event
from typing import Optional, Dict

def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
    if not os.path.exists(dotenv_path):
        raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª")
    load_dotenv(dotenv_path)

def validate_event_data(event_data: Optional[Dict]) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
    if not event_data:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
    
    required_fields = ['event_name', 'date', 'time']
    for field in required_fields:
        if field not in event_data:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
    
    return event_data

def print_event_details(event_data: Dict):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print("\nüìÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:")
    print(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data['event_name']}")
    print(f"‚Ä¢ –î–∞—Ç–∞: {event_data['date']}")
    print(f"‚Ä¢ –í—Ä–µ–º—è: {event_data['time']}")
    print(f"‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞: {event_data.get('is_relative', False)}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    load_environment()
    llm_handler = LLMHandler()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(description='–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
    parser.add_argument('--audio', 
                       type=str, 
                       help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (WAV/OGG)', 
                       required=True)
    parser.add_argument('--test', 
                       action='store_true', 
                       help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è)')
    args = parser.parse_args()

    try:
        # 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        print("\nüîä –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
        recognized_text = recognize_speech(args.audio)
        print(f"\nüìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text}")

        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ LLM
        print("\nüß† –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞...")
        event_data = llm_handler.parse_calendar_request(recognized_text)
        validated_data = validate_event_data(event_data)
        
        # 3. –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π
        print_event_details(validated_data)

        # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
        if not args.test:
            print("\nüìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ...")
            create_calendar_event(validated_data)
            print("\n‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        else:
            print("\n‚ö† –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if os.getenv('DEBUG', 'False').lower() == 'true':
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()